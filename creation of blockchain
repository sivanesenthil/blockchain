 Creation of blockchain

import datetime
import hashlib
import json
from flask import Flask,jsonify

#Part-1 Building a Blockchain
class Blockchain:
    def __init__(self):
        self.chain = []
        self.create_block(proof = 1, previous_hash ='0')  #creating genesis block
        
    def create_block(self, proof, previous_hash):     #creating new block
        block = {'index': len(self.chain) + 1,
                 'timestamp': str(datetime.datetime.now()),
                 'proof' : proof,
                 'previous_hash': previous_hash}
        self.chain.append(block)          #Appending new block to the chain
        return block
    
    def get_previous_block(self):      # to get the last block in the blockchain
        return self.chain[-1]
    
    def proof_of_work(self, previous_proof):                #Proof of work,finding next hash
        new_proof = 1
        check_proof = False
        while check_proof is False:
            hash_operation = hashlib.sha256(str(new_proof**2 - previous_proof**2).encode()).hexdigest()    #Apply sha256 algorithm
            if hash_operation[:4] == '0000':
                check_proof = True
            else:
                new_proof += 1
        return new_proof
    
    def hash(self, block):             #verification
        encoded_block = json.dumps(block, sort_keys = True).encode()
        return hashlib.sha256(encoded_block).hexdigest()

    def is_chain_valid(self, chain):     #validating the chain
        previous_block = chain[0]
        block_index = 1
        while block_index < len(chain):
            block = chain[block_index]
            if block['previous_block'] != self.hash(previous_block):
                return False
            previous_proof = previous_block['proof']              #checking whether proof has 4 leading zeros
            proof = block['proof']
            hash_operation = hashlib.sha256(str(proof**2 - previous_proof**2).encode()).hexdigest()
            if hash_operation[:4] !='0000' :
                return False
            previous_block = block
            block_index += 1
        return True
    
#Part-2 Mining blockchain

#creating a web app
app = Flask(__name__)    #notes: Flask Quickstart: we create an instance of this class. The first argument is the name of the application’s module or package. If you are using a single module (as in this example), you should use __name__ because depending on if it’s started as application or imported as module the name will be different ('__main__' versus the actual import name).
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False
#creating a blockchain

blockchain = Blockchain()  #creating the instance of the class blockchain

# Mining a new block

@app.route('/mine_block', methods = ['GET'])           #We then use the route() decorator to tell Flask what URL should trigger our function.
def mine_block():
    previous_block = blockchain.get_previous_block()
    previous_proof = previous_block['proof']
    proof = blockchain.proof_of_work(previous_proof)
    previous_hash = blockchain.hash(previous_block)
    block = blockchain.create_block(proof,previous_hash)
    response = {'message' : 'Congratulations,You just mined a block!Your block will be added to a Blockchain',
                'index' : block['index'],
                'timestamp' : block['timestamp'],
                'proof' : block['proof'],
                'previous_hash' : block['previous_hash']}
    return jsonify(response),200      # To convey successful creation of block, 200- HTTP code for Success


#getting a full blockchain

@app.route('/get_chain', methods = ['GET']) 
def get_chain():
    response = {'chain': blockchain.chain,
                'length': len(blockchain.chain)}
    return jsonify(response),200 

#Running the App

app.run(host = '0.0.0.0' , port = 5000)
    
